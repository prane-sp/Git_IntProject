<apex:page tabStyle="SPIRE__tab" >
    
    <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/jquery.min.js')}"></script>
    <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/force.com.js.rest.toolkit/forcetk.js')}"></script>
    
   
    
    <html xmlns:ng="http://angularjs.org"  lang="en">
        <head>
            <meta charset="utf-8" name="viewport" content="width=device-width initial-scale=0.9"/>

            <apex:stylesheet value="{!URLFOR($Resource.Account_Summary, 'app/css/bootstrap-combined.min.css')}"/>
            <apex:stylesheet value="{!URLFOR($Resource.Account_Summary, 'app/css/ng-grid/ng-grid.css')}"/>
            <apex:stylesheet value="{!URLFOR($Resource.Account_Summary, 'app/css/daterangepicker-bs2.css')}"/>
            <apex:stylesheet value="{!URLFOR($Resource.Account_Summary, 'app/css/select2.css')}"/>
            <apex:stylesheet value="{!URLFOR($Resource.Account_Summary, 'app/css/joint.css')}"/>
            <apex:stylesheet value="{!URLFOR($Resource.Account_Summary, 'app/css/ng-grid/ng-grid.css')}"/>
            
            <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/jquery.min.js')}"></script>
            <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/select2/select2.min.js')}" type="text/javascript"></script>    
            <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/angular-all/angular.js')}"></script>
            <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/twitter-bootstrap/bootstrap.min.js')}"></script>      
            <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/ui-select2/select2.js')}" type="text/javascript"></script>
    
            <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/angular-ui/angular-ui.min.js')}"></script>            
            <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/ui-bootstrap-tpls-0.6.0.js')}"></script>                        
            <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/ng-grid/ng-grid.min.js')}"></script>
            
            <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/highcharts/highcharts.src.js')}"></script>
            <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/highcharts/highchart-plain.js')}"></script>
            
            
            
             
            <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/highcharts/exporting.js')}"></script>
            <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/bootstrap-daterangepicker-master/moment.min.js')}"></script>
            <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/bootstrap-daterangepicker-master/daterangepicker.js')}"></script>
            <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/jquery.knob.js')}"></script>
            <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/jquery.sparkline.js')}"></script>
            <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/numeral.min.js')}"></script> 
            <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/ng-table/ng-table.js')}"></script>
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/select2/3.4.4/select2-bootstrap.css"></link>
            <apex:stylesheet value="{!URLFOR($Resource.Account_Summary, 'app/css/select2-bootstrap.css')}"/>
            <script src= "{!URLFOR($Resource.Account_Summary, 'app/js/lib/angular-table/angular-table.js')}"></script>
            <script src= "{!URLFOR($Resource.Account_Summary, 'app/js/lib/notificationWidget.js')}"></script>
            <apex:stylesheet value="{!URLFOR($Resource.Account_Summary, 'app/css/app.css')}"/>
            
        </head>
        <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/underscore/underscore.js')}"></script>
        <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/angular-all/angular-strap.js')}"></script>
       
        <script src="{!URLFOR($Resource.Account_Summary, 'app/js/lib/jointjs/joint.nojquery.js')}"></script>           
               
        <script type="text/javascript">
           
                    
                    var myapp = angular.module('LeadsSummary', ['ngGrid', 'chartsExample.directives', 'ui.bootstrap', '$strap.directives', 'ngTable', 'angular-table', 'notificationWidget']);
                    myapp.config(function ($routeProvider, $locationProvider, $httpProvider) {
                        $locationProvider.html5Mode(true);
                        
                    });
                    
                    myapp.filter('encodeURIComponent', function() {
                        return window.encodeURIComponent;
                    });
                    myapp.filter('notPromoted', function() {
                      return function(input) {
                        return input ? '\u2718' : '\u2713';
                      };
                    });
                    myapp.directive('spDatePicker', function () {
                            return {
                                restrict: 'A',
                                link: function (scope, element, attr) {
                                    $(element).daterangepicker({
                                            ranges: {
                                                'This Quarter': [moment().month((Math.floor((moment().month()-1)/3)*3)+1).startOf('month'), moment()],
                                                'Last Quarter': [moment().subtract({ months: (moment().month() % 3) + 1}).endOf('month').subtract({ months: 3 }).startOf('month'), moment().subtract({ months: (moment().month() % 3) + 1}).endOf('month')],                                                
                                                'This Year': [moment().startOf('year')],
                                                'Last Year': [moment().subtract('year', 1).startOf('year'), moment().startOf('year')],                                                
                                                'All': [moment("01/01/2013"), moment('12/31/2020')]
                                            },
                                            startDate: moment("01/01/2013"),
                                            endDate: moment("12/31/2020"),
                                            minDate: '01/01/2013',
                                            showDropdowns: true,
                                        },function (startDate, endDate) {
                                        scope.$eval(attr.spDatePicker, {$startDate: startDate, $endDate: endDate});
                                    });
                                }
                            };
                    });
                    myapp.directive('leadSparkline', [function () {
                        'use strict';
                        return {
                            restrict: 'A',
                            
                            require: 'ngModel',
                            link: function (scope, elem, attrs, ngModel) {                    
                                //var values = [100.00,100.00,100.00,80.00,80.00,66.67];
                                var opts={};
                                
                                
                                var property = scope.text;
                                scope.$watch(attrs.ngModel, function () {
                                    //console.log('Model changed');
                                    //console.log(ngModel);
                                    render();
                                });
                                var render = function () {
                                    var model;
                                    if(ngModel.$viewValue)  {
                                        
                                        var vals = [];
                                        
                                        model = ngModel.$viewValue;
                                        vals.push(model['Less than 2 days'] ? model['Less than 2 days'] : 0);
                                        vals.push(model['Less than a week'] ? model['Less than a week'] : 0);
                                        vals.push(model['Less than 3 weeks'] ? model['Less than 3 weeks'] : 0);
                                        vals.push(model['Less than 6 weeks'] ? model['Less than 6 weeks'] : 0);                                        
                                        vals.push(model['More than 6 weeks'] ? model['More than 6 weeks'] : 0);
                                        
                                        // debugger;
                                        // Draw a sparkline for the #sparkline element
                                        $(elem).sparkline(vals, {
                                            type: "bar",
                                            // Map the offset in the list of values to a name to use in the tooltip
                                            tooltipFormat: 'Status changed :    {{offset:offset}} - {{value}}',
                                            tooltipValueLookups: {
                                                'offset': {
                                                    0: 'Less than 2 days',
                                                    1: 'Less than a week',
                                                    2: 'Less than 3 weeks',
                                                    3: 'Less than 6 weeks',
                                                    4: 'More than 6 weeks',
                                                    
                                                }
                                            },
                                            width: '100',
                                            barWidth: 10
                                        });
                                    }
                                };
                            }
                        };
                    }]);
                    myapp.directive('loadingWidget', ['requestNotificationChannel', function (requestNotificationChannel) {
                        return {
                            restrict: "A",
                            link: function (scope, element) {
                                // hide the element initially
                                element.hide();
                    
                                var startRequestHandler = function() {
                                    // got the request start notification, show the element
                                    element.show();
                                };
                    
                                var endRequestHandler = function() {
                                    // got the request start notification, show the element
                                    element.hide();
                                };
                                // register for the request start notification
                                requestNotificationChannel.onRequestStarted(scope, startRequestHandler);
                                // register for the request end notification
                                requestNotificationChannel.onRequestEnded(scope, endRequestHandler);
                            }
                        };
                    }]);
                    myapp.directive('transitionProcess', [function () {
                        'use strict';
                        return {
                            restrict: 'A',                            
                            require: 'ngModel',
                            link: function (scope, elem, attrs, ngModel) {
                                
                                var graph = new joint.dia.Graph;
                                var paper = new joint.dia.Paper({ el: $('#paper'), width: 1350, height: 520, gridSize: 1, model: graph });
                                //paper.scale(0.8,0.8);
                                scope.graphEl = graph;
                                // Create a custom element.
                                // ------------------------
                                joint.shapes.custom = {};
                                
                                joint.shapes.custom.ModelLink = joint.dia.Link.extend({
                                     defaults: joint.util.deepSupplement({
                                        type: 'custom.ModelLink',
                                    }, joint.dia.Link.prototype.defaults)
                                });
                                joint.shapes.html = {};
                                joint.shapes.html.Element = joint.shapes.basic.Rect.extend({
                                    defaults: joint.util.deepSupplement({
                                        type: 'html.Element',
                                        attrs: {
                                            rect: { stroke: 'none', 'fill-opacity': 0 }
                                        }
                                    }, joint.shapes.basic.Rect.prototype.defaults)
                                });
                                
                                // Create a custom view for that element that displays an HTML div above it.
                                // -------------------------------------------------------------------------
                                
                                joint.shapes.html.ElementView = joint.dia.ElementView.extend({
                                
                                    template: [
                                        '<div class="html-element text-center" >',       
                                        '<label id = "nameLabel" style="vertical-align:middle;"  ></label>',
                                        '<label id = "countLabel"></label>',
                                        '<span ></span>', '<br/>',        
                                        
                                        '<div class="weekTransitions" style="margin-top:-100px;vertical-align:middle;">',
                                        '</div>', 
                                        '<div class="blah" style="vertical-align:middle;">',
                                        '</div>',
                                       
                                        
                                        '</div>'
                                    ].join(''),
                                
                                    initialize: function() {
                                        _.bindAll(this, 'updateBox');
                                        joint.dia.ElementView.prototype.initialize.apply(this, arguments);
                                
                                        this.$box = $(_.template(this.template)());
                                        // Prevent paper from handling pointerdown.
                                        this.$box.find('input,select').on('mousedown click', function(evt) { evt.stopPropagation(); });
                                        // This is an example of reacting on the input change and storing the input data in the cell model.
                                        this.$box.find('input').on('change', _.bind(function(evt) {
                                            this.model.set('input', $(evt.target).val());
                                        }, this));
                                        this.$box.find('select').on('change', _.bind(function(evt) {
                                            this.model.set('select', $(evt.target).val());
                                        }, this));
                                        this.$box.find('select').val(this.model.get('select'));
                                        this.$box.find('.delete').on('click', _.bind(this.model.remove, this.model));
                                        // Update the box position whenever the underlying model changes.
                                        this.model.on('change', this.updateBox, this);
                                        // Remove the box when the model gets removed from the graph.
                                        this.model.on('remove', this.removeBox, this);
                                       
                                        //this.updateBox();
                                    },
                                    render: function() {
                                        joint.dia.ElementView.prototype.render.apply(this, arguments);
                                        this.paper.$el.prepend(this.$box);
                                        this.updateBox();
                                        return this;
                                    },
                                    updateBox: function() {
                                        // Set the position and dimension of the box so that it covers the JointJS element.
                                        var bbox = this.model.getBBox();
                                        
                                        
                                        // Draw the status history sparkline
                                        var model = this.model.get('histData');
                                        var showhist = this.model.get('showhist');
                                        var showtrans = this.model.get('showtrans');                                        
                                        var timeFrame = scope.transitionTimeframe;
                                        var tpwModel = this.model.get('transitionsPerWeekData');
                                        var serName = this.model.get('name')
                                        if(!model) {
                                            model = {};
                                        }
                                           
                                        var vals = [];
                                        
                                        vals.push(model['Less than 2 days'] ? model['Less than 2 days'] : 0);
                                        vals.push(model['Less than a week'] ? model['Less than a week'] : 0);
                                        vals.push(model['Less than 3 weeks'] ? model['Less than 3 weeks'] : 0);
                                        vals.push(model['Less than 6 weeks'] ? model['Less than 6 weeks'] : 0);                                        
                                        vals.push(model['More than 6 weeks'] ? model['More than 6 weeks'] : 0);
                                        
                                        // debugger;
                                        // Draw a sparkline for the #sparkline element
                                        if(showhist) {
                                           this.$box.find('.blah').sparkline(vals, {
                                                type: "bar",
                                                // Map the offset in the list of values to a name to use in the tooltip
                                                tooltipFormat: 'Status changed :    {{offset:offset}} - {{value}}',
                                                tooltipValueLookups: {
                                                    'offset': {
                                                        0: 'Less than 2 days',
                                                        1: 'Less than a week',
                                                        2: 'Less than 3 weeks',
                                                        3: 'Less than 6 weeks',
                                                        4: 'More than 6 weeks',
                                                        
                                                    }
                                                },
                                                width: '100',
                                                barWidth: 10
                                            });
                                        }
                                        if(showtrans) {
                                            //if(serName === 'RSM Accepted') debugger;
                                            var modtpw = tpwModel ? tpwModel[serName] : undefined;
                                            if(!modtpw) {
                                                modtpw = {};
                                            }
                                            var i = 1;
                                            
                                            var parent = this.$box.find('.weekTransitions');
                                            
                                             _.each( _.keys(modtpw), function(d) {
                                                
                                                var tpwVals = [];
                                                var tpwLookupValue = [];
                                                var chartData = {};
                                                var now = moment().startOf('week');
                                                var start = moment().subtract('days',timeFrame );
                                                var startWeek = start.startOf('week');
                                                
                                                while (startWeek.unix() < now.unix()) {
                                                    var newDate = startWeek.add('days', 7);
                                                    //console.log('Pushing: ' + newDate.format() + ' for ' + d);
                                                    chartData[newDate.unix()] = 0;
                                                    startWeek = newDate;
                                                }
                                                var tpwObj = modtpw[d];
                                                    _.each(_.keys(tpwObj), function (da) {
                                                        var key = '20' + da;
                                                        var date = key.substring(0,4) + '-' + key.substring(4,6) + '-' + key.substring(6,8)
                                                        //console.log(date);
                                                        var key = moment(date).add('days', 1).unix();
                                                        var val = tpwObj[da];
                                                        //console.log(key + ',' + val);
                                                        chartData[key] = val;
                                                    
                                                    });
                                                    _.each(_.keys(chartData), function(dt) {
                                                        //console.log(d + ': ' + model.data[dt]);
                                                        tpwLookupValue.push(moment(dt* 1000).format('MMM DD, YYYY'));
                                                        tpwVals.push(chartData[dt]);
                                                }); 
                                                    //console.log(chartData)
                                                    //console.log(tpwLookupValue);
                                                    //console.log(tpwVals);
                                            
                                                //; 
                                            
                                                // Draw a sparkline for the #sparkline element
                                                var newId = serName.replace(' ', '') + i;
                                                i+=1;
                                                parent.append("<div id= \'" + newId+ "\' style='margin-left:-250px;margin-bottom:100px;'></div>");
                                                parent.find('#' + newId) 
                                                 .sparkline(tpwVals, {
                                                    type: "line",
                                                    // Map the offset in the list of values to a name to use in the tooltip
                                                    tooltipFormat: 'From ' + d.replace(':', ' to ') +  ' - Transitions in Week of {{offset:offset}}:  {{y}}',
                                                    tooltipValueLookups: {
                                                    'offset': tpwLookupValue
                                                    },
                                            
                                            
                                                    width: '50',
                                                    height: '30'
                                            
                                            
                                                });
                                                     
                                            });
                                        
                                        }
                                        
                                            
                                        //this.$box.find('div').sparkline(this.model.get('data')[5,6,7,2,0,4,2,4], { type: 'bar', height: 100});
                                        var bg = this.model.get('bg');
                                        var textClr = "black";
                                        if(bg === 'red') {
                                            textClr = 'white';
                                        }
                                        this.$box.find('#nameLabel').text(this.model.get('display'));
                                        
                                        this.$box.find('#countLabel').text(this.model.get('count')).css({color: textClr});
                                       
                                        var topInd = this.model.get('labelTopIndent');
                                        this.$box.find('#nameLabel').css({ "margin-top": topInd, color: textClr});
                                        
                                        var sptopInd = this.model.get('barChartTopIndent');
                                        if(sptopInd != '0px')
                                            this.$box.find('.blah').css({ "margin-top": sptopInd});
                                        
                                        //this.$box.find('span').text(this.model.get('select'));
                                        
                                        this.$box.css({ color: textClr, background: bg , width: bbox.width, height: bbox.height, left: bbox.x, top: bbox.y, transform: 'rotate(' + (this.model.get('angle') || 0) + 'deg)' });
                                    },
                                    removeBox: function(evt) {
                                        this.$box.remove();
                                    }
                                });
                                var createLink = function (src, tgt, label,vert) {
                                    //console.log('Creating link with label: ' + label);
                                    return new joint.dia.Link({
                                                source: src,
                                                target: tgt,
                                                vertices: vert,
                                                attrs: {
                                                     '.connection': { stroke: '#4897f1', 'stroke-width': 15 },     
                                                    '.marker-target': { d: 'M 30 0 L 0 15 L 30 30 z' , stroke: '#4897f1', fill: '#4897f1',}
                                                },
                                                labels: [
                                                    { position: .45, attrs: { text: { text: label, fill: 'black', 'font-family': 'sans-serif', }, 
                                                    rect: { stroke: '#F39C12', 'stroke-width': 1, width: 25, height: 10, rx: 5, ry: 5} }},
                                                ],
                                                labelMarkup: [
                                                    '<g class="label">',
                                                    '<rect />',
                                                    '<text />',
                                                    //'<foreignObject width="100" height="500" >',
                                                    //'<body xmlns="http://www.w3.org/1999/xhtml">',
                                                    //'<div class="svgdiv">' + label +'</div>',
                                                    //'<div></div>',
                                                    //'<a href="www.gmail.com">Gmail</a>',
                                                   //'</body>',
                                                    //'</foreignObject>',
                                                    '</g>'
                                                ].join(''),    
                                                
                                            });
                                }
                                // Create JointJS elements and add them to the graph as usual.
                                // -----------------------------------------------------------
                                var createCell = function (xpos, ypos, w, h, key, displayName, bkgrd, labelmgnTop, bcmgnTop,  showHisto, showTransitions) {
                                    
                                    return new joint.shapes.html.Element(
                                    { 
                                        position: { x: xpos, y: ypos }, 
                                        size: { width: w, height:  h }, 
                                        name: key,
                                        display:displayName ,
                                        select: 'one', 
                                        histData:  ngModel.$viewValue.histogramData ? ngModel.$viewValue.histogramData[key]: [],
                                        transitionsPerWeekData :  ngModel.$viewValue.toTransitions,
                                        bg: bkgrd,                                        
                                        labelTopIndent: labelmgnTop,
                                        barChartTopIndent: bcmgnTop,
                                        count: getLabelForTransition(key, ngModel.$viewValue.activeStatus),
                                        showhist : showHisto,
                                        showtrans : showTransitions
                                       
                                    });
                                };
                                var getTransitionValue = function(from, to, model) {
                                    if(model === undefined) 
                                        return 'N/A';
                                    var found = _.filter(model, function (d) { 
                                        return d.from === from && d.to === to;
                                    });
                                    return found.length === 1 ? found[0].value : '0'; // + from +';'+ to;
                                };
                                var getLabelForTransition = function(transition, model) {
                                    
                                    if(transition === 'ISR Accepted') {
                                        var filt = _.filter(_.keys(model), function(d) {
                                            return d.indexOf('Sales Accepted - Contacting') != -1 ||
                                                   d.indexOf('Sales Accepted - Deferred') != -1 ||
                                                   d.indexOf('Sales Accepted - Qualifying') != -1 ;
                                        });
                                        var sum = _.reduce(filt, function(memo, num){                                         
                                                return memo + model[num]; 
                                        }, 0);
                                        return sum;
                                    } else if(transition === 'ISR Accepted2') {
                                        var filt = _.filter(_.keys(model), function(d) {
                                            return d.indexOf('Sales Accepted - Passed to Partner') != -1 ||
                                                   d.indexOf('Partner Accepted') != -1;
                                        });
                                        var sum = _.reduce(filt, function(memo, num){                                         
                                                return memo + model[num]; 
                                        }, 0);
                                        return sum;
                                    } else if(transition === 'Converted') {
                                        //return '';
                                        var keys  = _.filter(_.keys(model), function (d) { return d.indexOf('Converted') === 0;})
                                        var sum = _.reduce(keys, function(memo, num){                                         
                                                return memo + model[num]; 
                                        }, 0);
                                        return sum;
                                    } else {
                                        var val =  model ? model[transition] : undefined;
                                        return val ? val : '0'
                                    }
                                };
                                
                                var render = function(ngModel, scope) {           
                                            if(!ngModel.$viewValue || _.size(ngModel.$viewValue) === 0) 
                                                return;
                                            var cells = [];
                                            var currentSt = ngModel.$viewValue.activeStatus;
                                            var convertedSt = ngModel.$viewValue.convertedStatus;
                                            var model = ngModel.$viewValue.transitionData;
                                            var histoData = ngModel.$viewValue.histogramData;
                                            // Show histogram when no campaign and no campaing selected
                                            var showHisto = true;
                                            var showTransitions = true;
                                            if(scope.selectedCampaign) {
                                                showHisto = false;
                                                showTransitions = false;
                                            } else if(scope.selectedCampaignType) {
                                                showHisto = false;
                                                showTransitions = true;
                                            };
                                            
                                            var mn = createCell( 10, 25, 125, 225, 'Marketing Nurturing', 'Marketing Nurturing', "#ffe773", 50, "0px", false, false);
                                            var nonmql = createCell( 10, 300, 125, 200, "DontMQL", "Don't MQL", "#ff7d73", 75, "0px", false, false);
                                            var mq = createCell(230, 25, 125, 225,'Marketing Qualified', 'Marketing Qualified', "#ffe773", 50, "0px", showHisto, showTransitions  );
                                            var sr = createCell(230, 400, 1050, 100, 'Sales Rejected',  'Sales Rejected', "#ff7d73", 15, "0px",  showHisto , showTransitions);
                                            var rsma = createCell(900, 25, 125, 150,'RSM Accepted', 'RSM Accepted', "#64a8d1", 40, "-100px",  showHisto, showTransitions);
                                            var isra = createCell(450, 125, 125, 150,'ISR Accepted', 'ISR Accepted', "#64a8d1", 40, "0px",  showHisto, showTransitions);
                                            var isrq = createCell(675, 125, 125, 150,'ISR Qualified', 'ISR Qualified', "#64a8d1", 40, "0px",  showHisto, showTransitions);
                                            var isra_2 = createCell(900, 185, 125, 150,'ISR Accepted2', 'ISR Accepted', "#64a8d1", 40, "0px",  showHisto, showTransitions);
                                            var conv = createCell(1120, 25, 150, 300,'Converted',  'Converted', "#74e868", 100, "0px", showHisto, showTransitions);
                                            
                                            
                                            
                                            // Marketing Nurturing
                                            var l_mn_mq = createLink(mn, {"x": 230, "y": 138}, getTransitionValue('Marketing Nurturing', 'Marketing Qualified', model));
                                            //var l_mn_sr = createLink(mn, sr, getTransitionValue('Marketing Nurturing', 'Sales Rejected',  model));
                                            
                                            // Marketing Qualified
                                            var l_mq_sr = createLink(mq, {"x": 295, "y": 400}, getTransitionValue('Marketing Qualified', 'Sales Rejected',  model));
                                            var l_mq_rsma = createLink({"x": 357, "y": 75} , {"x": 905, "y": 75}, getTransitionValue('Marketing Qualified', 'RSM Accepted', model));
                                            var l_mq_isra = createLink({"x": 357, "y": 200}, {"x": 450, "y": 200}, getTransitionValue('Marketing Qualified', 'ISR Accepted',  model));
                                            
                                            // ISR Accepted
                                            var l_isra_isrq = createLink(isra, {"x": 670, "y": 200}, getTransitionValue('ISR Accepted', 'ISR Qualified',  model)); 
                                            var l_isra_sr = createLink(isra, {"x": 512, "y": 400}, getTransitionValue('ISR Accepted', 'Sales Rejected', model));
                                            
                                            // ISR Qualified
                                            
                                            var l_isrq_isra_2 = createLink({"x": 800, "y": 260}, isra_2, getTransitionValue('ISR Qualified', 'ISR Accepted2',  model));
                                            var l_isrq_rsma = createLink({"x": 797, "y": 150}, {"x": 900, "y": 150}, getTransitionValue('ISR Qualified', 'RSM Accepted',  model));
                                            var l_isrq_sr = createLink(isrq, {"x": 736, "y": 400}, getTransitionValue('ISR Qualified', 'Sales Rejected', model));
                                            
                                            // RSM Accepted
                                            var l_rsma_conv = createLink(rsma, {"x": 1119, "y": 100}, getTransitionValue('RSM Accepted', 'Converted', model));
                                            
                                            // ISR Accepted - 2
                                            var l_isra_2_conv = createLink({"x": 1027, "y": 275}, {"x": 1116, "y": 275}, getTransitionValue('ISR Accepted2', 'Converted', model));                                            
                                            var l_isra_2_sr = createLink(isra_2, {"x": 962, "y": 400} , getTransitionValue('ISR Accepted2', 'Sales Rejected', model));                                            
                                            
                                            var l_rsma_sr = createLink({"x": 993, "y": 23}, {"x": 1190, "y": 398}, getTransitionValue('RSM Accepted', 'Sales Rejected', model),  
                                             [{"x":994,"y":10},{"x":1314,"y":10},{"x":1314,"y":347},{"x":1190,"y":346}]);                                            
                                            
                                            
                                            cells.push(
                                                //Cells
                                                mn, mq, sr, rsma, isra, isrq, isra_2, conv, nonmql,  
                                                
                                                //Links
                                                l_mn_mq, l_mq_sr, l_mq_rsma, l_mq_isra, l_isra_isrq, l_isra_sr, l_isrq_sr,
                                                l_isrq_isra_2, l_isrq_rsma, l_rsma_conv, l_isra_2_conv, l_rsma_sr, l_isra_2_sr
                                            );
                                            graph.clear();
                                            _.each(graph.getLinks(), function(d) {
                                                graph.removeLink(d);
                                            });
                                            graph.resetCells();
                                            graph.addCells(cells);
                                            //console.log(graph.toJSON());
                                };   
                                scope.$watch(attrs.ngModel, function () {
                                    //console.log('Model changed');
                                    //console.log(ngModel);
                                    render(ngModel, scope);
                                    _.each($('.labels') , function(d) {
                                           var rect = d.firstChild.firstChild;
                                           rect.setAttribute('height', 15);
                                           rect.setAttribute('width', 35);
                                           rect.setAttribute('x', -18);
                                            rect.setAttribute('y', -2);
                                        }); 
                                }); 
                                         
                            }
                        };
                    }]); 
                    myapp.directive('transitionSparkline', [function () {
                        'use strict';
                        return {
                            restrict: 'A',
                            
                            require: 'ngModel',
                            link: function (scope, elem, attrs, ngModel) {                    
                                //var values = [100.00,100.00,100.00,80.00,80.00,66.67];
                                var opts={};
                                
                                
                                var property = scope.text;
                                scope.$watch(attrs.ngModel, function () {
                                    //console.log('Model changed');
                                    //console.log(ngModel);
                                    render();
                                });
                                var render = function () {
                                    var model;
                                    if(ngModel.$viewValue)  {
                                        
                                        
                                        model = ngModel.$viewValue;
                                        var vals = [];
                                        var lookupValue = [];
                                       

                                        _.each(_.keys(model.data), function(d) {
                                            //console.log(d + ': ' + model.data[d]);
                                            lookupValue.push(moment(d* 1000).format('MMM DD, YYYY'));
                                            vals.push(model.data[d]);
                                        }); 
                                        
                                        var serName = model.name;
                                        
                                        // Draw a sparkline for the #sparkline element
                                        $(elem).sparkline(vals, {
                                            type: "line",
                                            // Map the offset in the list of values to a name to use in the tooltip
                                            tooltipFormat: 'Transitions in Week of {{offset:offset}}:  {{y}}',
                                            tooltipValueLookups: {
                                                'offset': lookupValue
                                            },
                                            
                                            
                                            width: '200', 
                                            height: '75'
                                            
                                            
                                        });
                                    }
                                };
                            }
                        }
                    }]);
                    var contrl= myapp.controller('LeadsSummaryController', function ($scope, $filter, $q, $location, $window, LeadRemoteService) {
                                                
                        $scope.selectedCampaign =  $location.search().campaign ? $location.search().campaign : undefined;                        
                        $scope.campaignNameSelected = $scope.selectedCampaign;
                        $scope.showImage = true;
                        $scope.leadRecordsGridColumnDefs = [

                                { field: 'Name', displayName: 'Name', width: 250, cellTemplate: '<div style="text-align:center;text-decoration: underline;"><a href="/{{row.entity.Id}}" target="_blank">{{row.entity[col.field]}}</a> </div>'},
                                { field: 'Company', displayName: 'Company',width: 200 },
                                { field: 'Owner.Name', displayName: 'Owner',width: 150 },
                                { field: 'Status', displayName: 'Status' ,width: 200}, 
                                //{ field: 'LastChange.CreatedDate', displayName: 'Last Modified' ,width: 150, cellFilter : 'date:"MMM d, y h:mm a"'},
                                //{ field: 'LastChange.OldValue', displayName: 'Old Value' ,width: 150},
                                //{ field: 'LastChange.NewValue', displayName: 'New Value' ,width: 150},
                                //{ field : 'LastChange.CreatedBy.Name', displayName: 'Changed By' ,width: 150},
                                //{ field : 'ChangeIn45days', displayName: 'Status changed in last 45 days' ,width: 250},
                                //{ field : 'TimeAgo', displayName: 'Updated' ,width: 150},
                                { field : "dontMQL", displayName: "Don't MQL",width: 150},
                                

                            ];
                            
                        $scope.fromDate = moment("01/01/2013");
                        $scope.toDate = moment("12/31/2020");
                        $scope.isDefaultTimeRange = function() {
                            return $scope.fromDate.diff(moment("01/01/2013"), 'days') === 0 && $scope.toDate.diff(moment("12/31/2020"), 'days') === 0;
                        };
                        $scope.rangeStartDate = $scope.fromDate.format("MMM D, YYYY");
                        $scope.rangeEndDate = $scope.toDate.format("MMM D, YYYY");    
                        $scope.changeDate = function(fromDate, toDate) {
                            $scope.fromDate = fromDate;
                            $scope.toDate = toDate;
                            $scope.rangeStartDate = fromDate.format("MMM D, YYYY");
                            $scope.rangeEndDate = toDate.format("MMM D, YYYY");
                            if (!$scope.$$phase) {
                                $scope.$apply();
                            }
                        };
                                    
                                      
                        $scope.leadRecordsData = []; 
                        $scope.histogramData = {};
                        $scope.transitionProcessChartData = {};
                         
                        $scope.leadRecordsGridOptions = { 
                            data: 'leadRecordsData.records' ,
                            columnDefs: $scope.leadRecordsGridColumnDefs,
                            showGroupPanel: true,
                            showFooter: true,
                            showFilter: true,
                            enableColumnResize: true,
                            enableHighlighting: true,
                            enablePaging: false,
                            showColumnMenu: true,
                            
                            totalServerItems: 'leadRecordsData.records.length',
                            sortInfo: {
                                fields: ['Status'],
                                directions: ['asc']
                            }, 
                            rowHeight: 40
                        };
                        $scope.convertedStatusList = [];
                        
                        
                        $scope.getCampaigns = function(val) {
                            var query = "SELECT Id, Name FROM Campaign where Name like \'%" + val + "%'";
                            query = query + " and EndDate > " + $scope.fromDate.format('YYYY-MM-DD');
                            query = query + " and EndDate < " + $scope.toDate.format('YYYY-MM-DD');
                            if($scope.selectedCSM && $scope.selectedCampaignOwner) {
                                query = query + " and (CSM__c= '" + $scope.selectedCSM.Name +"' OR OwnerId= '" + $scope.selectedCampaignOwner.Id +"')"
                            } else {
                                if($scope.selectedCSM) {
                                    query = query + " and CSM__c= '" + $scope.selectedCSM.Name +"'";
                                }
                                if($scope.selectedCampaignOwner) {
                                    query = query + " and OwnerId= '" + $scope.selectedCampaignOwner.Id +"'";
                                }
                            }
                            
                            query = query + " order by EndDate desc";                            
                            return LeadRemoteService.getResultsForQuery(query).then(function(data) {
                                return data.records;                                
                            });
                        
                        };
                        $scope.updateActiveStatusForLeads = function() {
                            var newData = _.clone($scope.transitionProcessChartData);  
                            var statusList = _.countBy($scope.leadRecordsData.records, 'Status');
                            var count = _.filter($scope.leadRecordsData.records, function(d) { 
                                     return d.Status === 'Marketing Nurturing' 
                                     && (d.DoNotCall === true || d.Do_Not_Tele_Qualify__c === true 
                                     || d.Non_qualifying_Contact__c === true 
                                     || d.Partner_Domain__c === true);
                            }).length;
                            statusList['Marketing Nurturing'] = statusList['Marketing Nurturing'] - count;
                            statusList['DontMQL'] = count;                           
                            newData.activeStatus = statusList;
                            $scope.transitionProcessChartData= newData;
                              
                        };
                        $scope.updateURL = function () {
                            $location
                                .search('campaign', $scope.selectedCampaign ? $scope.selectedCampaign: null)
                                .path($location.path());
                        };
                        $scope.getLeadsForSelectedCampaign = function() {
                            $scope.campaignNameSelected = true;
                            $scope.updateURL();
                            LeadRemoteService.getResultsForQuery("SELECT Id, Name, Type, Owner.Name, Campaign_Not_Promoted__c,  CSM__c, NumberOfLeads, StartDate, EndDate from Campaign where Name ='" +
                                 $scope.selectedCampaign + "'").then(function(data) {
                                 $scope.campaignInfo = data.records[0];
                            });
                            LeadRemoteService.getResultsForQuery("SELECT CampaignId, Id, Lead.Id, Lead.Owner.Name, Lead.Name, Lead.Status, Lead.Company, Lead.DoNotCall, Lead.Do_Not_Tele_Qualify__c, Lead.Non_qualifying_Contact__c, Lead.Partner_Domain__c, Status FROM CampaignMember where Campaign.Name = '" +
                                 $scope.selectedCampaign + "' and  Lead.Id != NULL ").then(function(data) {
                                var leadData = _.pluck(data.records , 'Lead');
                                _.each(leadData, function(item) {
                                    if(item.Status === 'Marketing Nurturing') {
                                            item.dontMQL = (item.DoNotCall === true || item.Do_Not_Tele_Qualify__c === true || item.Non_qualifying_Contact__c === true || item.Partner_Domain__c === true) ? 'Yes' : 'No';
                                    } else {
                                        item.dontMQL = 'N/A';
                                    }
                                });
                                $scope.leadRecordsData = {
                                    'records' : leadData,
                                    'totalSize' : data.totalSize,
                                    'done': data.done,
                                    'nextRecordsUrl': data.nextRecordsUrl
                                };                                 
                                $scope.currentlyViewingStatus = $scope.selectedCampaign; 
                                $scope.transitionProcessChartData.transitionData = undefined;
                                $scope.transitionProcessChartData.toTransitions = undefined; 
                                $scope.transitionProcessChartData.histogramData = undefined; 
                                $scope.updateActiveStatusForLeads();
                                                    
                            });
                            

                        }
                       
                        
                        $scope.clearSelectedCampaign = function() {
                        
                            $scope.selectedCampaign=undefined;
                            $scope.campaignNameSelected = false;
                            $scope.campaignInfo = undefined;
                            
                            $scope.currentlyViewingStatus = undefined;
                            $scope.transitionProcessChartData = {};
                            $scope.updateURL();
                            
                            
                        };
                        $scope.transitionTimeframe = '30';
                        $scope.getTransitionsPerWeek = function() {
                            LeadRemoteService.getResultsForQuery("SELECT  JSON__c,  CreatedDate FROM Misc_Data__c where Name = 'TranstionsPerWeek-"
                                                                 + ($scope.selectedCampaignType ? $scope.selectedCampaignType.value + '-' : '') + $scope.transitionTimeframe + "' order by CreatedDate desc limit 1").then(function(data){
                                    $scope.leadsPerWeekData = data;
                                    $scope.top10LeadTransitions = [];
                                    if($scope.leadsPerWeekData.records.length > 0) {
                                       var leadsPerWeekObj = JSON.parse($scope.leadsPerWeekData.records[0].JSON__c);
                                       var mergeValues = function(keys, leadObj) {
                                            var temp = {}
                                            _.each(keys, function(d) {
                                                var obj = leadObj[d];
                                                _.each(_.keys(obj) , function(k) {
                                                    if(!temp[k]) {
                                                      temp[k] = obj[k];     
                                                    } else {
                                                       temp[k] += obj[k];
                                                    }
                                                });
                                            });
                                            return temp;
                                        };
                                                                                        
                                                                                        
                                        var mq_isr_keys = _.filter(_.keys(leadsPerWeekObj), function (d) {
                                                     return d.indexOf('Marketing Qualified:Sales Accepted - Contacting') != -1 ||
                                                            d.indexOf('Marketing Qualified:Sales Accepted - Qualifying') != -1 ||
                                                            d.indexOf('Marketing Qualified:Sales Accepted - Deferred') != -1  
                                        });                                                
                                        
                                        
                                        
                                        leadsPerWeekObj ['Marketing Qualified:ISR Accepted'] = mergeValues(mq_isr_keys, leadsPerWeekObj);
                                         
                                        var isra_isrq_keys = _.filter(_.keys(leadsPerWeekObj), function (d) {
                                                     return d.indexOf('Sales Accepted - Contacting:ISR Qualified') != -1 ||
                                                            d.indexOf('Sales Accepted - Qualifying:ISR Qualified') != -1 ||
                                                            d.indexOf('Sales Accepted - Deferred:ISR Qualified') != -1  
                                        });                                                
                                        
                                        
                                        
                                        leadsPerWeekObj ['ISR Accepted:ISR Qualified'] = mergeValues(isra_isrq_keys, leadsPerWeekObj);
                                        
                                         
                                        var isrq_isra_2_keys = _.filter(_.keys(leadsPerWeekObj), function (d) {
                                                     return d.indexOf('ISR Qualified:Sales Accepted - Passed to Partner') != -1 ||
                                                            d.indexOf('ISR Qualified:Partner Accepted') != -1;  
                                        });                                                
                                        
                                        
                                        leadsPerWeekObj ['ISR Qualified:ISR Accepted2'] = mergeValues(isrq_isra_2_keys, leadsPerWeekObj);          
                                       
                                        var isrq_conv_keys = _.filter(_.keys(leadsPerWeekObj), function (d) {
                                                     return d.indexOf('Sales Accepted - Passed to Partner:Converted into Existing Opportunity') != -1 ||
                                                            d.indexOf('Sales Accepted - Passed to Partner:Converted to New Opportunity') != -1 ||
                                                            d.indexOf('Sales Accepted - Passed to Partner:Converted to New Contact') != -1 || 
                                                            d.indexOf('Partner Accepted:Converted into Existing Opportunity') != -1 ||
                                                            d.indexOf('Partner Accepted:Converted to New Opportunity') != -1 ||
                                                            d.indexOf('Partner Accepted:Converted to New Contact') != -1;  
                                        });                                                
                                        
                                        
                                        leadsPerWeekObj ['ISR Accepted2:Converted'] = mergeValues(isrq_conv_keys, leadsPerWeekObj);          
                                       
                                       var rsma_conv_keys = _.filter(_.keys(leadsPerWeekObj), function (d) {
                                                     return d.indexOf('RSM Accepted:Converted into Existing Opportunity') != -1 ||
                                                            d.indexOf('RSM Accepted:Converted to New Opportunity') != -1 ||
                                                            d.indexOf('RSM Accepted:Converted to New Contact') != -1;  
                                        });                                                
                                        
                                        
                                        leadsPerWeekObj ['RSM Accepted:Converted'] = mergeValues(rsma_conv_keys, leadsPerWeekObj);          
                                       
                                        var leadArr = [];
                                            
                                        _.each(_.keys(leadsPerWeekObj).sort(), function(d) {
                                                var tot = 0;
                                                _.each(leadsPerWeekObj[d], function(d1) {
                                                     tot +=d1;
                                                }); 
                                                leadArr.push({'transition' : d , 'value' : tot});
                                        });
                                        var leadArrSorted = _.sortBy(leadArr, 'value');
                                        leadArrSorted = leadArrSorted.slice(Math.max(leadArrSorted.length - 10, 1)).reverse();
                                        
                                            
                                        _.each(_.pluck(leadArrSorted, 'transition'), function(d) {
                                            var chartData = {};
                                            var now = moment().startOf('week');
                                            var start = moment().subtract('days', $scope.transitionTimeframe);
                                            var startWeek = start.startOf('week');
                                            while (startWeek.unix() < now.unix()) {
                                                var newDate = startWeek.add('days', 7);
                                                //console.log('Pushing: ' + newDate.format() + ' for ' + d);
                                                chartData[newDate.unix()] = 0;
                                                startWeek = newDate;
                                            }
                                            //console.log(chartData);
                                            var initialData = leadsPerWeekObj[d];
                                            
                                            _.each(_.keys(initialData), function(da) {
                                                var key = '20' + da;
                                                var date = key.substring(0,4) + '-' + key.substring(4,6) + '-' + key.substring(6,8)
                                                //console.log(date);
                                                var key = moment(date).add('days', 1).unix();
                                                var val = initialData[da];
                                                //console.log(key + ',' + val);
                                                chartData[key] = val;
                                            });
                                            $scope.top10LeadTransitions.push({ name: d,  data : chartData});
                                        });
                                        var obj = {
                                            'Marketing Qualified': {
                                                'Marketing Nurturing:Marketing Qualified' : leadsPerWeekObj['Marketing Nurturing:Marketing Qualified']
                                            },   
                                            'ISR Accepted': {
                                                'Marketing Qualified:ISR Accepted' : leadsPerWeekObj['Marketing Qualified:ISR Accepted'],
                                                
                                            },
                                            'ISR Qualified': {
                                                'ISR Accepted:ISR Qualified': leadsPerWeekObj['ISR Accepted:ISR Qualified']
                                            },
                                            'RSM Accepted': {
                                                'Marketing Qualified:RSM Accepted': leadsPerWeekObj['Marketing Qualified:RSM Accepted'],
                                                'ISR Qualified:RSM Accepted': leadsPerWeekObj['ISR Qualified:RSM Accepted']
                                            },
                                            'Converted': {
                                                'RSM Accepted:Converted': leadsPerWeekObj['RSM Accepted:Converted'],
                                                'ISR Accepted:Converted': leadsPerWeekObj['ISR Accepted:Converted']
                                            },
                                            'ISR Accepted2': {
                                                'ISR Qualified:ISR Accepted2' : leadsPerWeekObj['ISR Qualified:ISR Accepted2'],
                                                
                                            },
                                            'Converted': {
                                                'RSM Accepted:Converted' : leadsPerWeekObj['RSM Accepted:Converted'],
                                                'ISR Accepted2:Converted' : leadsPerWeekObj['ISR Accepted2:Converted'],
                                                
                                            },
                                                 
                                        };
                                        $scope.leadsPerWeekObjRO = leadsPerWeekObj;
                                        var newData = _.clone($scope.transitionProcessChartData)
                                        //newData.top10LeadTransitionsData =  $scope.top10LeadTransitions; 
                                        newData.toTransitions = obj;
                                        $scope.transitionProcessChartData= newData;
                                   }
                            });
                        };
                        $scope.selectRecentCampaign = function(campaign) {
                            $scope.selectedCampaign = campaign.Name;
                            $scope.getLeadsForSelectedCampaign();
                        };
                        $scope.getRecentCampaignLoads = function() {
                            LeadRemoteService.getRecentlyLoadedCampaigns().then(function(data) {
                                 data.records.splice(5,data.records.length);
                                $scope.recentCampaignLoads = data;
                            });
                        }; 
                        $scope.getRecentCampaignLoads();
                        $scope.getCSMs = function() {
                            LeadRemoteService.getCSMs().then(function(data) {
                                $scope.csms = _.sortBy(data.records, 'Name');
                            });
                        }; 
                        $scope.getCSMs();
                        $scope.getCampaignOwners = function() {
                            LeadRemoteService.getCampaignOwners().then(function(data) {
                                $scope.campaignOwners = _.sortBy(data.records, 'Name');
                            });
                        }; 
                        $scope.getCampaignOwners();
                      
                       LeadRemoteService.getCampaignDescription().then(function(data) {
                           $scope.campaignDescObj = data;
                           $scope.pickListValues = _.filter($scope.campaignDescObj.fields, function(d) {return d.name === 'Type';})[0].picklistValues;
                           //$scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'shortDate'];
                           //$scope.format = $scope.formats[0]; 
                       }); 
                       
                       $scope.getNextRecords = function() {
                           if($scope.leadRecordsData.done)
                               return;
                           var nextURL = $scope.leadRecordsData.nextRecordsUrl;
                           
                           LeadRemoteService.getNextRecords(nextURL).then(function(data) {
                               if($scope.selectedCampaignType || $scope.selectedCampaign) {
                                   var leadData = _.pluck(data.records , 'Lead')
                                   $scope.leadRecordsData.records = $scope.leadRecordsData.records.concat(leadData);
                               } else {
                                   $scope.leadRecordsData.records = $scope.leadRecordsData.records.concat(data.records);
                               }
                               
                               $scope.leadRecordsData.done = data.done;
                               $scope.leadRecordsData.nextRecordsUrl = data.nextRecordsUrl;
                               if($scope.selectedCampaignType || $scope.selectedCampaign ) 
                                   $scope.updateActiveStatusForLeads();
                               //$scope.$apply(true);
                           })
                       };
                       if($scope.campaignNameSelected) {
                           $scope.getLeadsForSelectedCampaign();
                       }
                       
                       
                    });
                    
                    var client = new forcetk.Client();
                    client.setSessionToken('{!$Api.Session_ID}');
                    client.proxyUrl = null;
                    client.instanceUrl = '';
                    myapp.factory('LeadRemoteService', function($http, $rootScope, $q) {
                        return {
                         
                        getResultsForQuery: function(q) {
                            var deferred = $q.defer();                                
                            console.log("Executing query: " + q);
                            client.query(q, function(response){
                                $rootScope.$apply(function() {
                                    deferred.resolve(response);           
                                });                                                                
                            });                                
                            //Returning the promise object
                            return deferred.promise;
                        }, 
                        getNextRecords: function(nextUrl) {
                            var deferred = $q.defer();                                
                            console.log("Executing query for next set of records: " + nextUrl);
                            client.queryMore(nextUrl, function(response) {
                                console.log(response); 
                                $rootScope.$apply(function() {
                                    deferred.resolve(response);           
                                }); 
                               
                            });                             
                            //Returning the promise object
                            return deferred.promise;
                        },
                        getCampaignDescription: function() {
                            var deferred = $q.defer();                                
                            
                            client.describe('Campaign', function(response){
                                $rootScope.$apply(function() {
                                    deferred.resolve(response);           
                                });                                                                
                            });                                
                            //Returning the promise object
                            return deferred.promise;
                        }, 
                        getAllItems: function(){
                            //Creating a deferred object
                            var deferred = $q.defer();
                            client.query("select Status, Count(Id) Total from Lead where RecordType.Name = 'Lead'  group by Status", function(response){
                                //console.log(response);
                                $rootScope.$apply(function() {
                                    deferred.resolve(response);           
                                });
                                
                                
                            });
                            
                            
                            //Returning the promise object
                            return deferred.promise;
                        },
                        getDontMQLItems: function(){
                            //Creating a deferred object
                            var deferred = $q.defer();
                            client.query("select Count(Id) Total from Lead where RecordType.Name = 'Lead'  and Status = 'Marketing Nurturing' and (DoNotCall = true or Do_Not_Tele_Qualify__c = true or Non_qualifying_Contact__c= true or Partner_Domain__c= true)", function(response){
                                //console.log(response);
                                $rootScope.$apply(function() {
                                    deferred.resolve(response);           
                                });
                                
                                
                            });
                            
                            
                            //Returning the promise object
                            return deferred.promise;
                        },
                        getConvertedLeadItems: function(){
                            //Creating a deferred object
                            var deferred = $q.defer();
                            client.query("select Status, Count(Id) Total from Lead where RecordType.Name = 'Lead' and IsConverted = true and Status like 'Converted%' group by Status", function(response){
                                //console.log(response);
                                $rootScope.$apply(function() {
                                    deferred.resolve(response);           
                                });
                                
                                
                            });
                            
                            
                            //Returning the promise object
                            return deferred.promise;
                        },
                        getHistogramData: function(){
                            //Creating a deferred object
                            var deferred = $q.defer();
                            // dev - 00OR0000000k6JM
                            // production = 00O50000003bDkD
                            client.ajax('/v29.0/analytics/reports/00O50000003bDkD', function(response){
                                //console.log(response);
                                $rootScope.$apply(function() {
                                    deferred.resolve(response);           
                                });                                
                            });
                            //Returning the promise object
                            return deferred.promise;
                        },
                        getRecentlyLoadedCampaigns: function(){
                            //Creating a deferred object
                            var deferred = $q.defer();
                            client.query("SELECT Campaign.Id, Campaign.Name, Count(Lead.Id) Total FROM CampaignMember where Lead.Id != NULL and (not Lead.Company like 'Silver Peak%') and Status != 'Sent' and CreatedDate = LAST_N_DAYS:60 group by Campaign.Name,Campaign.Id", function(response){
                                //console.log(response);
                                $rootScope.$apply(function() {
                                    deferred.resolve(response);           
                                });
                                
                                
                            });
                            
                            
                            //Returning the promise object
                            return deferred.promise;
                        },
                        getCSMs: function(){
                            //Creating a deferred object
                            var deferred = $q.defer();
                            client.query("Select Id, Name, Alias, UserRoleId, UserRole.Id, UserRole.Name from User where UserRole.Name like 'Channel Sales Manager%'", function(response){
                                //console.log(response);
                                $rootScope.$apply(function() {
                                    deferred.resolve(response);           
                                });                                                                
                            });
                            
                            //Returning the promise object
                            return deferred.promise;
                        },
                        getCampaignOwners: function(){
                            //Creating a deferred object
                            var deferred = $q.defer();
                            client.query("SELECT Owner.Id Id, Owner.Name Name FROM Campaign group by Owner.Name,Owner.Id", function(response){
                                //console.log(response);
                                $rootScope.$apply(function() {
                                    deferred.resolve(response);           
                                });                                                                
                            });
                            
                            //Returning the promise object
                            return deferred.promise;
                        },
                      }
                    }); 
         </script>  
         <body ng-app="LeadsSummary">
            <style>
                h1 {
                    font-size: 25px;
                    line-height: 1;
                    text-align: center;
                   
                }
                .addTotalRow {
                    border-top: 5px solid #252CE0 !important;
                }
                h4 {
                    font-size: 17.5px;
                    }
               .h1Heading {
                    margin: 10px 0px 10px 0px; 
               }
               .tablevalue {
                    font-size: 20px;
                    font-weight: bold;
                    text-decoration: none;
                    line-height: 1em;
                    color: black;
               } 
               .tablevaluelink {
                        font-size: 20px;
                        font-weight: bold;
                        text-decoration: none;
                        line-height: 1
                        
                        
                        
                        
                        ;
                        color: deepskyblue;
                    }
                .tabledesclink {
                    font-size: 15px;
                    font-weight: bold;
                    line-height: 1em;
                    color: #26ac01;
                }
                a {
                    cursor:pointer;
                }
                .link-tools  { 
                    display: none 
                }
                #paper {
                   position: relative;
                  
                   display: inline-block;
                   background: transparent;
                   overflow: hidden;
                }
                #paper svg {
                   background: transparent;
                }
                #paper svg .link {
                   z-index: 2;
                  
                }
                .html-element {
                   position: absolute;
                   background: #A4D53A;
                   /* Make sure events are propagated to the JointJS element so, e.g. dragging works.*/
                   pointer-events: none;
                   -webkit-user-select: none;
                   border-radius: 4px;
                   border: 2px solid #2980B9;
                   box-shadow: inset 0 0 5px black, 2px 2px 1px gray;
                   padding: 5px;
                   box-sizing: border-box;
                   z-index: 2;
                }
                .html-element select,
                .html-element input,
                .html-element button {
                   /* Enable interacting with inputs only. */
                   pointer-events: auto;   
                }
                .blah {
                    margin-top:100px;
                }
                .blah, .weekTransitions {
                   pointer-events: auto;   
                }
                
                .html-element button.delete {
                   color: white;
                   border: none;
                   background-color: #C0392B;
                   border-radius: 20px;
                   width: 15px;
                   height: 15px;
                   line-height: 15px;
                   text-align: middle;
                   position: absolute;
                   top: -15px;
                   left: -15px;
                   padding: 0;
                   margin: 0;
                   font-weight: bold;
                   cursor: pointer;
                }
                .html-element button.delete:hover {
                   width: 20px;
                   height: 20px;
                   line-height: 20px;
                }
                .html-element select {
                   position: absolute;
                   right: 2px;
                   bottom: 28px;
                }
                .html-element input {
                   position: absolute;
                   bottom: 0;
                   left: 0;
                   right: 0;
                   border: none;
                   color: #333;
                   padding: 5px;
                   height: 16px;
                }
                .html-element label {
                   color: #333;
                   text-shadow: 1px 0 0 lightgray;
                   font-weight: bold;
                }
                .label {
                
                }
                .html-element span {
                   position: absolute;
                   top: 2px;
                   right: 9px;
                   color: white;
                   font-size: 10px;
                }
                #countLabel {
                    font-size: 26px;
                    
                }
                #loadingWidget {
                    margin-top: 100px;
                    display: none;
                    width:200px;
                    height: 75px;
                    position: fixed;
                    top: 50%;
                    left: 50%;
                    text-align:center;
                    padding:10px;
                    font:normal 16px Tahoma, Geneva, sans-serif;
                    margin-left: -50px;
                    margin-top: -50px;
                    z-index:2;
                    overflow: auto;
                    background: #d4d4d4;
                }
                .campaignLabel {
                    font-size: 13px;
                    font-weight: bold;
                    text-decoration: none;
                    line-height: 1em;
                    color: black;
                    
                }
                
                 .sidebarSPIRE {
                    position: absolute;
                    right: 20px;
                    top: 0;
                    width: 325px;
                    height: 300px;
                    left: auto;
                    #overflow-y:scroll;
                    margin-top: 50px;
                }
                
                .container-fluid > .content {
                    margin-right: 240px;
                    margin-left: 0;
                }
                
                .feed-cell {
                  padding: 5px;
                  #border-bottom: 1px solid #344A5F;
                  text-decoration: none;
                }
                
                .feed-title {
                  font-weight: bold;
                  font-size: 14px;
                }
                
                .feed-subtitle {
                  padding-top: 5px;
                  padding-left: 5px;
                  font-size: 12px;
                }
                .filterContainer:after {
                    content: "Filter by:";
                    position: absolute;
                    top: -1px;
                    left: -1px;
                    padding: 3px 7px;
                    font-size: 12px;
                    font-weight: bold;
                    background-color: #f5f5f5;
                    border: 1px solid #ddd;
                    color: #9da0a4;
                    -webkit-border-radius: 4px 0 4px 0;
                    -moz-border-radius: 4px 0 4px 0;
                    border-radius: 4px 0 4px 0;
                }
                .repeated-item {
                    margin: 0 0 10px 5px;
                }
            </style>
            <div ng-controller="LeadsSummaryController" class="row" ng-cloak='ng-cloak' style="height:600px" >
                <div id="loadingWidget" style="padding: 0 .7em;" loading-widget='loading-widget' class="row-fluid ui-corner-all">
                  <div class="loadingContent">
                    <p style="margin-top: 25px;"></p><img id = 'loadingImage' alt="Loading  Content" src="{!URLFOR($Resource.Account_Summary, 'app/images/ajax-loader.gif')}"/>Loading...
                  </div>
                </div>
                 <div class="text-center" style="margin-top:25px;margin-bottom:25px;color:royalblue;">                    
                        <h1>Leads For Campaign</h1>                         
                </div>
                   
                <div class = 'container' >
                    <div class="sidebarSPIRE">
                        <div class="well">
                          <div class = "text-center"><h4>Recently Loaded Campaigns</h4></div>
                          <hr style= 'border-top: 1px solid #27B5BB'/>
                          <div>
                             
                              <ul ng-repeat="campaign in recentCampaignLoads.records" class="repeated-item">
                                <li class="feed-cell" style='list-style:none;margin:0 0 0 0;' >
                                  <div class="feed-title">
                                      
                                      <a href="" ng-click='selectRecentCampaign(campaign)' style='text-decoration:underline;'>{{campaign.Name}} <span class="badge badge-info">{{campaign.Total}}</span></a>
                                      <a href="/{{campaign.Id}}" target="_blank">
                                          <img src="{!URLFOR($Resource.Account_Summary, 'app/images/salesforce.png')}" alt="Salesforce" title="View in Salesforce"/>
                                      </a>
                                  </div>
                                  
                                </li>
                              </ul>  
                                 
                          </div>                        
                        </div>
                      </div>
                    <div class='offset2' style= "margin-right: 25px;" >
                        <form class="form-horizontal" >
                            <fieldset >                                        
                                                      
                                <div class="control-group" ng-show = 'selectedCampaignType === undefined'>
                                    <label class="control-label" for="textinput"><strong>Campaign Name: &nbsp;</strong></label>
                                    <input type="text" ng-model="selectedCampaign" placeholder="Start typing to select a campaign..." 
                                        typeahead="campaign.Name for campaign in getCampaigns($viewValue) | filter:$viewValue" 
                                        typeahead-loading="loadingLocations" typeahead-on-select = 'getLeadsForSelectedCampaign()' class="form-control" style="width: 400px;">
                                    </input>                                    
                                    <i ng-show="loadingLocations" class="glyphicon glyphicon-refresh"></i>
                                    <button ng-click="clearSelectedCampaign()" class="btn-danger" ng-show="selectedCampaign.length > 0">Clear</button>
                                </div> 
                                <div class="control-group" ng-hide="campaignNameSelected">
                                    <label class="control-label" for="textinput"><strong>Campaign End Date:</strong></label>
                                    <div class="span3" style="margin-left: 5px">                                        
                                        <div id="reportrange" sp-date-picker="changeDate($startDate, $endDate)"  >
                                            <strong><i class="icon-calendar icon-large"></i>
                                            <span class="ng-binding"> {{rangeStartDate}} - {{rangeEndDate}}</span>
                                            <b class="caret"></b>
                                            </strong>
                                            
                                        </div>
                                        <p ng-show = ' !isDefaultTimeRange()' style="font-style: italic;font-weight: bold;font-size: 90%;color: royalblue;"> 
                                        <sup>*</sup>Expand the time frame to see more campaigns 
                                        </p>     
                                    </div> 
                                </div>
                                <div class="control-group" >
                                  <label class="control-label" for="selectcsm"><strong>CSM:</strong></label>
                                  <div class="span4" style="margin-left: 5px">
                                    
                                    <select class="form-control input-xlarge" ng-model="selectedCSM" ng-options="csm.Name for csm in csms">
                                        <option></option>
                                    </select>
                                     <button ng-click="selectedCSM=undefined;" class="btn-danger" ng-show="selectedCSM.Name.length > 0">Clear</button>
                                  </div>
                                </div>
                                <div class="control-group" >
                                  <label class="control-label" for="selectcampaignowner"><strong>Campaign Owner:</strong></label>
                                  <div class="span4" style="margin-left: 5px">
                                    
                                    <select class="form-control input-xlarge" ng-model="selectedCampaignOwner" ng-options="owner.Name for owner in campaignOwners">
                                        <option></option>
                                    </select>
                                    <button ng-click="selectedCampaignOwner=undefined;" class="btn-danger" ng-show="selectedCampaignOwner.Name.length > 0">Clear</button>
                                  </div>
                                </div>
                            </fieldset>   
                        </form>
                    </div>
                </div>
                <div class = 'container' >
                    
                   <div class= "span6 offset2" ng-show = 'campaignInfo'>
                       <div class ='text-center'>
                           
                       </div>
                       <table class="table table-hover table-bordered table-condensed">
                           <caption class="capStyle" style="text-decoration: underline;">
                               <a href='' ng-click='showImage = !showImage'><b>Hide Image&raquo;</b></a>
                               <a href= '/{{campaignInfo.Id}}' ng-show = 'campaignInfo' target="_blank" style="margin-left: 25px"    ><b>Campaign Details &raquo;</b></a>                       
                               <a href= '/00O?scope=1&rt=5&scopeid={{campaignInfo.Name | encodeURIComponent}}' ng-show = 'campaignInfo' target="_blank" style="margin-left: 25px"><b>Campaign Members &raquo;</b></a>                                                  
                               <a href= '/00O50000003bFfj' ng-show = 'campaignInfo' target="_blank" style="margin-left: 25px"><b>Event List Loads &raquo;</b></a>
                               
                           </caption>                             
                           <tbody> 
                               <tr>
                                   <td class='campaignLabel' width='40%'>Campaign Type</td>
                                   <td>{{campaignInfo.Type}}</td>
                               </tr>
                               <tr>
                                   <td class='campaignLabel'>Campaign Owner</td>
                                   <td>{{campaignInfo.Owner.Name}}</td>
                               </tr>
                               <tr>
                                   <td class='campaignLabel'>CSM</td>
                                   <td>{{campaignInfo.CSM__c}}</td>
                               </tr>
                               <tr>
                                   <td class='campaignLabel'>Promoted by Silver Peak</td>
                                   <td>{{campaignInfo.Campaign_Not_Promoted__c | notPromoted}}</td>
                               </tr>
                               <tr>
                                   <td class='campaignLabel'># of Leads</td>
                                   <td>{{campaignInfo.NumberOfLeads}}</td>
                               </tr>
                               <tr>
                                   <td class='campaignLabel'>Campaign Start Date/End Date</td>
                                   <td>{{campaignInfo.StartDate | date:'mediumDate'}} - {{campaignInfo.EndDate | date:'mediumDate'}}</td>
                               </tr>
                               
                           </tbody>
                       </table>
                       
                   </div>
                </div>
                <div class = 'container offset2' >
                     <div ng-hide= '!campaignNameSelected || leadRecordsData.done '>
                        <button type="button" class="btn-primary" ng-click="getNextRecords()" >Fetch More Records &raquo;</button>
                        <h6>(Showing records {{leadRecordsData.records.length}} of {{leadRecordsData.totalSize}})</h6>
                         
                    </div>
                </div>    
                               
                <div class = 'container offset2' transition-process = 'transition-process' ng-model='transitionProcessChartData' 
                ng-hide= '!campaignNameSelected || !showImage'>
                    <div id = "paper" >       
                    </div>
                </div>    
                       
                <div class="container-fluid" ng-hide= '!campaignNameSelected'>
                     <h1>{{currentlyViewingStatus}} Records <h6>(Showing records {{leadRecordsData.records.length}} of {{leadRecordsData.totalSize}})</h6></h1>
                     <button type="button" class="btn-primary" ng-click="getNextRecords()" ng-hide= 'leadRecordsData.done'>Fetch More Records &raquo;</button>
                     <div class="gridStyle" ng-grid="leadRecordsGridOptions" style = "border: 1px solid rgb(212,212,212);height:400px;">
                     </div>
                 </div>
                 
            </div>
            <script>
              
              setTimeout(function() {
                   //console.log('Setting css');           
                   $('#paper').hide();
                   $('#paper').get(0).offsetHeight; // no need to store this anywhere, the reference is enough
                   $('#paper').show();
                   
                   
                  
              }, 1000);
              
            </script>
            <script type="text/javascript">
                if (document.location.hostname.search("c.na3.visual.force.com") !== -1) {
                
                      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
                      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
                      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
                    
                      ga('create', 'UA-45765411-2', 'salesforce.com');
                      ga('send', 'pageview');
                    
                
                }
            </script>
        </body>
        
     </html>
</apex:page>